{"version":3,"sources":["components/EconomyTable/EconomyTable.module.scss","components/Header/Header.module.scss","components/EditableText/EditableText.module.scss","templates/Homepage/Homepage.module.scss","containers/Header.js","components/Header/Header.jsx","containers/EditableText.js","actions/index.js","constants/actions.js","components/EditableText/EditableText.jsx","models/rowType.module.js","components/EconomyTable/EconomyTable.jsx","containers/EconomyTable.js","models/currency.model.js","containers/EconomyTableSettings.js","components/EconomyTableSettings/EconomyTableSettings.js","templates/Homepage/Homepage.jsx","App.js","serviceWorker.js","reducers/commonReducer.js","utils/utilityFunctions.js","reducers/colsReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","connect","state","app","commonReducer","props","className","styles","header","logo","appName","dispatch","changeFieldValue","field","id","value","type","payload","useState","passedText","changeValue","editMode","setEditMode","ref","useRef","useEffect","document","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","handleInputChange","inputValue","isFinite","toString","length","handleEditClick","handleInputEnter","charCode","FormControl","onChange","onKeyPress","input","onClick","text","rowType","rowsSettings","rowName","key","unit","common","cols","colsReducer","removeColumn","currency","Table","striped","responsive","hover","variant","table","map","row","i","renderColumns","col","colId","row__name","CurrencyModel","addColumn","name","changeCurrency","salesChannelName","setSalesChannelName","addColumnBtnDisabled","setAddColumnBtnDisabled","handleSelectClick","DropdownButton","title","DropdownItem","onSelect","eventKey","InputGroup","Prepend","Text","aria-describedby","Button","disabled","Homepage","container","App","path","Boolean","window","location","hostname","match","initialState","randomString","Math","random","substring","initialStateMock","uola","buyers","cpa","mathColumnFormulas","calcConversion","round","conversion","rootReducer","combineReducers","action","newColumn","filter","item","changedObj","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2691f028.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"EconomyTable_table__3WHd1\",\"row__name\":\"EconomyTable_row__name__moJiK\",\"row__type-icon\":\"EconomyTable_row__type-icon__5uxel\",\"icon--remove\":\"EconomyTable_icon--remove__3ktcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2QlDI\",\"logo\":\"Header_logo__1cSnK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableText_input__qRrdm\",\"text\":\"EditableText_text__1ixm2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Homepage_container__3QHEX\",\"hero-text\":\"Homepage_hero-text__1See-\"};","import {connect} from \"react-redux\";\r\nimport {Header} from \"../components/Header/Header\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    app: state.commonReducer\r\n})\r\n\r\nexport default connect(mapStateToProps)(Header);","import React from \"react\";\r\nimport styles from './Header.module.scss'\r\n\r\nexport const Header = ({...props}) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <div className=\"container\">\r\n                <span className={styles.logo}>\r\n                    {props.app.appName}\r\n                </span>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {EditableText} from \"../components/EditableText/EditableText\";\r\nimport {changeFieldValue} from \"../actions\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeFieldValue: (field, id, value) => dispatch(changeFieldValue(field, id, value))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(EditableText);","import {ADD_COLUMN, CHANGE_CURRENCY, CHANGE_FIELD_VALUE, REMOVE_COLUMN} from \"../constants/actions\";\r\n\r\nexport const addColumn = (name) => ({\r\n    type: ADD_COLUMN,\r\n    payload: {\r\n        name: name\r\n    }\r\n});\r\n\r\nexport const removeColumn = (id) => ({\r\n    type: REMOVE_COLUMN,\r\n    payload: {\r\n        id: id\r\n    }\r\n})\r\n\r\nexport const changeFieldValue = (field, id, value) => ({\r\n    type: CHANGE_FIELD_VALUE,\r\n    payload: {\r\n        field: field,\r\n        id: id,\r\n        value: value\r\n    }\r\n})\r\n\r\nexport const changeCurrency = (currency) => ({\r\n    type: CHANGE_CURRENCY,\r\n    payload: {\r\n        currency: currency\r\n    }\r\n})","export const ADD_COLUMN = \"ADD_COLUMN\";\r\nexport const REMOVE_COLUMN = \"REMOVE_COLUMN\";\r\nexport const CHANGE_FIELD_VALUE = \"CHANGE_FIELD_VALUE\";\r\nexport const CHANGE_CURRENCY = \"CHANGE_CURRENCY\";","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {FormControl} from \"react-bootstrap\";\r\nimport styles from \"./EditableText.module.scss\"\r\n\r\nexport const EditableText = ({...props}) => {\r\n    const [value, changeValue] = useState(props.passedText);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const ref = useRef(null);\r\n    const {field, id} = props;\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [])\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (!ref.current.contains(event.target)) setEditMode(false);\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        const inputValue = +event.target.value;\r\n        const maxLength = 10;\r\n        if (!isFinite(inputValue) || inputValue.toString().length > maxLength) {\r\n            return false;\r\n        } else {\r\n            changeValue(inputValue);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const emitChange = () => {\r\n            props.changeFieldValue(field, id, value);\r\n        }\r\n        emitChange();\r\n    }, [field, id, value])\r\n\r\n    const handleEditClick = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const handleInputEnter = (event) => {\r\n        if (event.charCode === 13) {\r\n            setEditMode(false);\r\n        }\r\n    }\r\n\r\n    const renderComponent = () => {\r\n        if (editMode) {\r\n            return (\r\n                <FormControl value={ value } onChange={handleInputChange} onKeyPress={handleInputEnter} className={styles.input}/>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <span onClick={handleEditClick} className={styles.text}>\r\n                { value }\r\n            </span>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            { renderComponent() }\r\n        </div>\r\n    )\r\n}","export const rowType = {\r\n    EDITABLE: \"editable\",\r\n    CALCULATIVE: \"calculative\",\r\n    REMOVABLE: \"removable\"\r\n}","import React from \"react\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport styles from './EconomyTable.module.scss'\r\nimport EditableText from \"../../containers/EditableText\";\r\nimport {rowType} from \"../../models/rowType.module\";\r\n\r\nconst rowsSettings = [\r\n    {\r\n        rowName: \"Name of sales channel\",\r\n        key: \"salesChannelName\",\r\n        rowType: rowType.REMOVABLE\r\n    },\r\n    {\r\n        rowName: \"User of Lead Acquisition\",\r\n        key: \"uola\",\r\n        unit: \"Users\",\r\n        rowType: rowType.EDITABLE,\r\n    },\r\n    {\r\n        rowName: \"Buyers\",\r\n        key: \"buyers\",\r\n        unit: \"Users\",\r\n        rowType: rowType.EDITABLE,\r\n    },\r\n    {\r\n        rowName: \"Conversion\",\r\n        key: \"conversion\",\r\n        unit: \"%\",\r\n        rowType: rowType.CALCULATIVE,\r\n    },\r\n    {\r\n        rowName: \"Cost per action\",\r\n        key: \"cpa\",\r\n        unit: \"currency\",\r\n        rowType: rowType.EDITABLE,\r\n    }\r\n]\r\n\r\nexport const EconomyTable = ({...props}) => {\r\n    const {currency} = props.common;\r\n    const cols = props.cols.cols;\r\n\r\n    const handleClickRemove = (colId) => {\r\n        props.removeColumn(colId);\r\n    }\r\n\r\n    const renderTable = () => {\r\n        const table = rowsSettings.map((row, i) => {\r\n            const renderColumns = cols.map(col => {\r\n                if (row.rowType === rowType.EDITABLE) {\r\n                    return (\r\n                        <td key={col.id + i}>\r\n                            <EditableText passedText={col[row.key]} field={row.key} id={col.id}/>\r\n                        </td>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <td key={col.id}>\r\n                            {col[row.key]}\r\n                            {row.rowType === rowType.REMOVABLE &&\r\n                            <i className={\"fas fa-trash \" + styles[\"icon--remove\"]} onClick={() => handleClickRemove(col.id)}/>\r\n                            }\r\n                        </td>\r\n                    )\r\n                }\r\n            })\r\n\r\n            if (i === 0) {\r\n                return (\r\n                    <thead key={i}>\r\n                        <tr>\r\n                            <td className={styles.row__name}>\r\n                                {row.rowName}\r\n                            </td>\r\n                            <td>\r\n                                {row.unit === \"currency\" ? currency : row.unit}\r\n                            </td>\r\n                            {renderColumns}\r\n                        </tr>\r\n                    </thead>\r\n                )\r\n            }\r\n            return (\r\n                <tbody key={i}>\r\n                    <tr>\r\n                        <td>\r\n                            {row.rowName}\r\n                            {row.rowType === rowType.EDITABLE &&\r\n                            <i className={\"fas fa-edit \" + styles[\"row__type-icon\"]}/>\r\n                            }\r\n                            {row.rowType === rowType.CALCULATIVE &&\r\n                            <i className={\"fas fa-calculator \" + styles[\"row__type-icon\"]}/>\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            {row.unit === \"currency\" ? currency : row.unit}\r\n                        </td>\r\n                        {renderColumns}\r\n                    </tr>\r\n                </tbody>\r\n            )\r\n        })\r\n\r\n        return table;\r\n    }\r\n\r\n    return (\r\n        <Table striped responsive hover variant=\"dark\" className={styles.table}>\r\n            {renderTable()}\r\n        </Table>\r\n\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {EconomyTable} from \"../components/EconomyTable/EconomyTable\";\r\nimport {removeColumn} from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    common: state.commonReducer,\r\n    cols: state.colsReducer\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        removeColumn: (id) => dispatch(removeColumn(id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EconomyTable);","export const CurrencyModel = {\r\n    UAH: \"UAH\",\r\n    USD: \"USD\"\r\n}","import {connect} from \"react-redux\";\r\nimport {EconomyTableSettings} from \"../components/EconomyTableSettings/EconomyTableSettings\";\r\nimport {addColumn, changeCurrency} from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    common: state.commonReducer\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addColumn: (name) => dispatch(addColumn(name)),\r\n        changeCurrency: (currency) => dispatch(changeCurrency(currency))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EconomyTableSettings);","import React, {useEffect, useState} from \"react\";\r\nimport {Button, DropdownItem, FormControl, InputGroup, DropdownButton} from \"react-bootstrap\";\r\nimport {CurrencyModel} from \"../../models/currency.model\";\r\n\r\nexport const EconomyTableSettings = ({...props}) => {\r\n    const [salesChannelName, setSalesChannelName] = useState(\"\");\r\n    const [addColumnBtnDisabled, setAddColumnBtnDisabled] = useState(true);\r\n    const {currency} = props.common;\r\n\r\n    const handleInputChange = (event) => {\r\n        setSalesChannelName(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        salesChannelName.length ? setAddColumnBtnDisabled(false) : setAddColumnBtnDisabled(true);\r\n    }, [salesChannelName])\r\n\r\n    const handleSelectClick = (event) => {\r\n        props.changeCurrency(event);\r\n    }\r\n\r\n    const handleAddColumnClick = () => {\r\n        props.addColumn(salesChannelName);\r\n        setSalesChannelName(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row mb-3\">\r\n                <div className=\"col-12 d-flex justify-content-end align-items-start\">\r\n                    <DropdownButton id=\"currencySelect\" title={currency} className=\"mr-2\" variant=\"primary\">\r\n                        <DropdownItem onSelect={handleSelectClick} eventKey={CurrencyModel.UAH}>\r\n                            { CurrencyModel.UAH }\r\n                        </DropdownItem>\r\n                        <DropdownItem onSelect={handleSelectClick} eventKey={CurrencyModel.USD}>\r\n                            { CurrencyModel.USD }\r\n                        </DropdownItem>\r\n                    </DropdownButton>\r\n                    <label className=\"mr-2\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    Your sales channel name\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl id=\"sales-channel\" aria-describedby=\"basic-addon3\" value={salesChannelName} onChange={handleInputChange}/>\r\n                        </InputGroup>\r\n                    </label>\r\n                    <Button variant=\"primary\" onClick={handleAddColumnClick} disabled={addColumnBtnDisabled}>\r\n                        Add column\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./Homepage.module.scss\"\r\nimport EconomyTable from \"../../containers/EconomyTable\";\r\nimport EconomyTableSettings from \"../../containers/EconomyTableSettings\";\r\n\r\nexport const Homepage = () => {\r\n    return (\r\n        <div className={`container ` + styles.container}>\r\n            <div>\r\n                <p>\r\n                    You can calculate unit economic for your project with help of this table, there are most common indexes:\r\n                </p>\r\n                <p>\r\n                    <strong>\r\n                        Profit = UA x (ARPU - CPA)\r\n                    </strong>\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        <p>\r\n                            <strong>UA (User Acquisition)</strong> = amount of users you attract.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            <strong>ARPU (Avenue Revenge Per User)</strong> = average revenue from attracted user. <br />\r\n                            You can get <strong>ARPU</strong> using next formula:\r\n                        </p>\r\n                        <p>\r\n                            <strong>\r\n                                ARPU = ARPPU x C1\r\n                            </strong>\r\n                        </p>\r\n                        <ul>\r\n                            <li>\r\n                               <p>\r\n                                   <strong>ARPPU (Average revenue per paying user)</strong> = average revenue from one paying user.\r\n                               </p>\r\n                            </li>\r\n                            <li>\r\n                                <p>\r\n                                    <strong>C1</strong> = the percent of users that made first deal.\r\n                                </p>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            <strong>CPA (Cost per Action)</strong> = how much you spend to attract user.\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            <strong>Profit</strong> = revenue that we get excluding costs / revenue you get excluding expenses on cost price of deal.\r\n                        </p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <EconomyTableSettings />\r\n            <EconomyTable />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.scss';\nimport Header from \"./containers/Header\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {Switch} from \"react-router\";\nimport {Homepage} from \"./templates/Homepage/Homepage\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <Header/>\n            </div>\n            <Switch>\n                <Route path=\"\">\n                    <Homepage/>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CurrencyModel} from \"../models/currency.model\";\r\nimport {CHANGE_CURRENCY} from \"../constants/actions\";\r\n\r\nconst initialState = {\r\n    appName: \"Unit Economy Calculator\",\r\n    currency: CurrencyModel.UAH\r\n}\r\n\r\nexport const commonReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_CURRENCY: {\r\n            return {\r\n                ...state,\r\n                currency: action.payload.currency\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","export const randomString = () => {\r\n    return Math.random().toString(36).substring(7);\r\n}","import {ADD_COLUMN, CHANGE_FIELD_VALUE, REMOVE_COLUMN} from \"../constants/actions\";\r\nimport {randomString} from \"../utils/utilityFunctions\";\r\n\r\nconst initialStateMock = {\r\n    cols: [\r\n        {\r\n            id: randomString(),\r\n            salesChannelName: \"Inst\",\r\n            uola: 0,\r\n            buyers: 0,\r\n            cpa: 0\r\n        },\r\n        {\r\n            id: randomString(),\r\n            salesChannelName: \"Vk\",\r\n            uola: 0,\r\n            buyers: 0,\r\n            cpa: 0\r\n        },\r\n        {\r\n            id: randomString(),\r\n            salesChannelName: \"Facebook\",\r\n            uola: 0,\r\n            buyers: 0,\r\n            cpa: 0\r\n        },\r\n        {\r\n            id: randomString(),\r\n            salesChannelName: \"Google\",\r\n            uola: 2,\r\n            buyers: 3,\r\n            cpa: 0\r\n        }\r\n    ]\r\n}\r\n\r\nconst mathColumnFormulas = (col) => {\r\n    const calcConversion = Math.round((col.buyers / col.uola) * 100)\r\n    return {\r\n        ...col,\r\n        conversion: isFinite(calcConversion) ? calcConversion : 0\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    ...initialStateMock,\r\n    cols: initialStateMock.cols.map(col => {\r\n        return mathColumnFormulas(col)\r\n    })\r\n}\r\n\r\nexport const colsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_COLUMN: {\r\n            const newColumn = {\r\n                id: randomString(),\r\n                salesChannelName: action.payload.name,\r\n                uola: 0,\r\n                buyers: 0,\r\n                cpa: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                cols: [...state.cols, mathColumnFormulas(newColumn)]\r\n            }\r\n        }\r\n        case REMOVE_COLUMN: {\r\n            return {\r\n                ...state,\r\n                cols: state.cols.filter(col => col.id !== action.payload.id)\r\n            }\r\n        }\r\n        case CHANGE_FIELD_VALUE: {\r\n            return {\r\n                ...state,\r\n                cols: state.cols.map(item => {\r\n                    if (item.id === action.payload.id) {\r\n                        const changedObj = {...item, [action.payload.field]: action.payload.value};\r\n                        return mathColumnFormulas(changedObj);\r\n                    } else return item;\r\n                })\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","import {commonReducer} from \"./commonReducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport {colsReducer} from \"./colsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    colsReducer,\r\n    commonReducer\r\n})\r\n\r\nexport default rootReducer;","import {createStore} from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}